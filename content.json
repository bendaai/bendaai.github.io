{"pages":[],"posts":[{"title":"Leetcode 1. 两数之和","text":"比较简单的一道题，用字典idx保存 值：位置 题目内容 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例: 给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] 题解123456789class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: idx=dict() for i in range(len(nums)): diff=target-nums[i] if diff in idx: return [idx[diff],i] idx[nums[i]]=i return [-1,-1]","link":"/2020/03/02/Leetcode%201.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"},{"title":"Leetcode 2. 两数相加","text":"考察链表，链表的题都可以设置一个头结点，之后前插入或后插入 题目内容 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0 开头。 示例： 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807 #题解 1234567891011121314151617181920212223242526272829303132333435# Definition for singly-linked list.# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode: ''' e表示为进位 pre作为返回链表的头结点，方便处理 10进制按位进行加法 注意情况： 一个链表结束，但有1的情况 ''' pre=ListNode(0) p=pre e=0 while l1 and l2: v=l1.val+l2.val+e l1.val,e=v%10,v//10 p.next=l1 p=l1 l1,l2=l1.next,l2.next if l2: p.next=l2 while e==1 and p.next: v=p.next.val+e e,p.next.val=v//10,v%10 p=p.next if e==1: p.next=ListNode(1) return pre.next","link":"/2020/03/02/Leetcode%202.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"},{"title":"Leetcode 3. 无重复字符的最长子串","text":"dp[k]保存以k位置字符为结尾的最长子串长度idx[e]保存e字符上一个出现的位置,如果没出现过，则认为上一个出现位置为-1动态规划方程：dp[k]=min(dp[k-1]+1,k-idx[s[k]]) 题目内容 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 示例: 示例1:输入: “abcabcbb”输出: 3解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。 示例 2:输入: “bbbbb”输出: 1解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。 示例 3:输入: “pwwkew”输出: 3解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。 题解123456789101112131415class Solution: def lengthOfLongestSubstring(self, s: str) -&gt; int: ''' dp[k]保存以k位置字符为结尾的最长子串长度 idx[e]保存e字符上一个出现的位置,如果没出现过，则认为上一个出现位置为-1 动态规划方程：dp[k]=min(dp[k-1]+1,k-idx[s[k]]) ''' if s=='': return 0 dp=[1 for i in range(len(s))] idx={s[0]:0} for k in range(1,len(s)): dp[k]=min(dp[k-1]+1,k-idx.get(s[k],-1)) idx[s[k]]=k return max(dp) 还可对dp数组进行压缩 123456789101112131415class Solution: def lengthOfLongestSubstring(self, s: str) -&gt; int: ''' 动态规划方程：dp[k]=min(dp[k-1]+1,k-idx[s[k]]) dp[k]只和dp[k-1]有关，所以可以进行数组压缩 ''' if s=='': return 0 ans=1 dp=1 idx={s[0]:0} for k in range(1,len(s)): dp=min(dp+1,k-idx.get(s[k],-1)) ans=max(ans,dp) idx[s[k]]=k return ans","link":"/2020/03/02/Leetcode%203.%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"},{"title":"Leetcode 4. 寻找两个有序数组的中位数","text":"把问题统一为寻找中间两个数的问题，用二分查找寻找第k个数 题目内容 给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。你可以假设 nums1 和 nums2 不会同时为空。 示例 示例 1:nums1 = [1, 3]nums2 = [2]则中位数是 2.0 2示例 2:nums1 = [1, 2]nums2 = [3, 4]则中位数是 (2 + 3)/2 = 2.5 题解1234567891011121314151617181920212223242526272829303132class Solution: def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float: ''' 寻找中间两个元素 ''' def find_no_k(nums1,nums2,l1,l2,k): ''' 假设左右数组分别为AB 我们将查找A的min(k/2,len(A)),设为la 和B的k-la 得到A1,a,A2;B1,b,B2; 若a&lt;b,由于a&lt;{b,B2,A2},而除去{b,B2,A2}，两数组剩余不到k, 因此a的位置在k前面，既可以舍弃a,A1 若a==b,答案就是a 若a&gt;b,同理舍弃b,B1 ''' L1,L2=len(nums1)-l1,len(nums2)-l2 if L1&gt;L2:#保证nums1代表的长度短的，方便处理 return find_no_k(nums2,nums1,l2,l1,k) if L1==0: return nums2[l2+k-1] if k==1: return min(nums1[l1],nums2[l2]) la=min(k//2,L1) lb=k-la a,b=nums1[la+l1-1],nums2[lb+l2-1] if a&lt;b: return find_no_k(nums1,nums2,l1+la,l2,k-la) if a&gt;b: return find_no_k(nums1,nums2,l1,l2+lb,k-lb) return a L1,L2=len(nums1),len(nums2) return (find_no_k(nums1,nums2,0,0,(L1+L2)//2+1)+find_no_k(nums1,nums2,0,0,(L1+L2-1)//2+1))/2","link":"/2020/03/02/Leetcode%204.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"}],"tags":[{"name":"leetcode","slug":"leetcode","link":"/tags/leetcode/"}],"categories":[{"name":"oj","slug":"oj","link":"/categories/oj/"}]}